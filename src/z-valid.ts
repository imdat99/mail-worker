// Generated by ts-to-zod
import { EmailOptions } from 'worker-mailer'
import { z } from 'zod'

export const emailOptionsSchema = z.object({
    to: z.union([
        z.string(),
        z.array(z.string()),
        z.object({
            name: z.string().optional(),
            email: z.string(),
        }),
        z.array(
            z.object({
                name: z.string().optional(),
                email: z.string(),
            })
        ),
    ]),
    reply: z
        .union([
            z.string(),
            z.object({
                name: z.string().optional(),
                email: z.string(),
            }),
        ])
        .optional(),
    cc: z
        .union([
            z.string(),
            z.array(z.string()),
            z.object({
                name: z.string().optional(),
                email: z.string(),
            }),
            z.array(
                z.object({
                    name: z.string().optional(),
                    email: z.string(),
                })
            ),
        ])
        .optional(),
    bcc: z
        .union([
            z.string(),
            z.array(z.string()),
            z.object({
                name: z.string().optional(),
                email: z.string(),
            }),
            z.array(
                z.object({
                    name: z.string().optional(),
                    email: z.string(),
                })
            ),
        ])
        .optional(),
    subject: z.string(),
    text: z.string().optional(),
    html: z.string().optional(),
    headers: z.record(z.string()).optional(),
    attachments: z
        .array(
            z.object({
                filename: z.string(),
                content: z.string(),
                mimeType: z.string().optional(),
            })
        )
        .optional(),
    dsnOverride: z
        .object({
            envelopeId: z.union([z.string(), z.undefined()]).optional(),
            RET: z
                .object({
                    HEADERS: z.boolean().optional(),
                    FULL: z.boolean().optional(),
                })
                .optional(),
            NOTIFY: z
                .object({
                    DELAY: z.boolean().optional(),
                    FAILURE: z.boolean().optional(),
                    SUCCESS: z.boolean().optional(),
                })
                .optional(),
        })
        .optional(),
})
